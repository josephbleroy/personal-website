<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Joseph B. LeRoy</title><link>https://josephbleroy.com/posts/</link><description>Recent content in Posts on Joseph B. LeRoy</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Sun, 08 Jan 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://josephbleroy.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing HTTPS and HTTP Headers in Nginx</title><link>https://josephbleroy.com/posts/2017/01/implementing-https-and-http-headers-in-nginx/</link><pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate><guid>https://josephbleroy.com/posts/2017/01/implementing-https-and-http-headers-in-nginx/</guid><description>There&amp;rsquo;s been a lot of focus on internet security and encryption over the past several years. You&amp;rsquo;ll find dozens of news reports every day about companies getting breached, individuals having their bank accounts compromised, and security researchers finding vulnerabilities in web services and encryption protocols.
As someone who is passionate about security and technology, I&amp;rsquo;ve been driven to keep up with current standards and implement best practices so that I don&amp;rsquo;t become victim to preventable vulnerabilities.</description><content type="html"><![CDATA[<p>There&rsquo;s been a lot of focus on internet security and encryption over the past several years. You&rsquo;ll find dozens of news reports every day about companies getting breached, individuals having their bank accounts compromised, and security researchers finding vulnerabilities in web services and encryption protocols.</p>
<p>As someone who is passionate about security and technology, I&rsquo;ve been driven to keep up with current standards and implement best practices so that I don&rsquo;t become victim to preventable vulnerabilities. With that being said, I&rsquo;ve learned a few methods to make it more difficult for attackers to breach my servers and ways to prevent malicious content from being served from my websites, or to <a href="https://medium.com/google-developer-experts/the-importance-of-using-https-all-the-way-9c65c0224e86#.zhjctgif4">prevent attackers from using MitM attacks</a> (Man in the Middle) when users connect to rogue access points (malicious public wifi hotspots).</p>
<p>So why should we care about HTTPS and HTTP Headers? Well, most people want to ensure the information they send between their computer and the website they&rsquo;re connecting to remains confidential. That means that if someone were to &ldquo;sniff&rdquo; their network traffic, they wouldn&rsquo;t be able to understand what&rsquo;s in the payload (raw data being exchanged), which usually contains usernames, passwords, credit card info, and other PII (Personally Identifiable Information) content.</p>
<p>There are several ways to check your existing site to make sure you&rsquo;re using proper HTTP Headers and SSL/TLS configuration settings. A few which come to mind are <a href="https://www.ssllabs.com/ssltest/">Qualys SSL Labs - SSL Server Test</a> and <a href="https://securityheaders.io/">securityheaders.io</a>. I&rsquo;m also using a new service called <a href="https://www.hardenize.com">Hardenize</a>, which is a slightly more comprehensive test that checks for modern security settings.</p>
<h3 id="definitions">Definitions</h3>
<p>It&rsquo;s important to know what the following components are to better understand what is being worked on and why it&rsquo;s being modified.</p>
<ul>
<li><strong>Nginx:</strong> HTTP Web Server, Reverse Proxy, Load Balancer, etc. Nginx can also do other things, but it&rsquo;s mainly used as a conduit for serving content over ports 80 (HTTP) or 443 (HTTPS).</li>
<li><strong>SSL/TLS (HTTPS):</strong> Protocol used to encrypt traffic between two endpoints. It&rsquo;s what gives you the little green lock next to the URI in your browser. Additionally, it&rsquo;s signed by a CA to verify domain and server ownership.</li>
<li><strong>Content Security Policy:</strong> Computer security standard enforced by the server to prevent the browser from rendering malicious (unauthorized or dangerous) content. Prevent cross-site scripting (XSS), clickjacking, code injection, along with other vulnerabilities.</li>
</ul>
<h3 id="setting-up-https-and-http-headers-in-nginx">Setting up HTTPS and HTTP Headers in Nginx</h3>
<p>For this example, I&rsquo;ll be using Nginx and Ubuntu 16.04.1 LTS. First, we&rsquo;ll want to set up some variables (our domain name and directory) which will be used in the Let&rsquo;s Encrypt certificate generation procedure. Let&rsquo;s Encrypt will insert a small file in a hidden directory at <code>/var/www/josephbleroy.com/html</code> to verify domain and server ownership.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">export DOMAINS<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;josephbleroy.com,www.josephbleroy.com&#34;</span>
export DIR<span style="color:#f92672">=</span>/var/www/josephbleroy.com/html
sudo letsencrypt certonly -a webroot --webroot-path<span style="color:#f92672">=</span>$DIR -d $DOMAINS
</code></pre></div><p>You should now be able to use your new certificate / keys to encrypt traffic between the web browser and web server. We&rsquo;ll also want to redirect all HTTP traffic to HTTPS (301 Redirect), implement the certificate and keys we generated to establish the encrypted (TLS 1.2 over port 443) connection, and add HTTP Headers (Content-Security-Policy, X-XSS-Protection, X-Frame-Options). All certificates and keys will be stored in <code>/etc/letsencrypt/live/</code>, for Ubuntu 16.04.1 LTS.</p>
<p>Let&rsquo;s get started by using vim or another editor to create or edit the following file:</p>
<p><code>sudo vim /etc/nginx/sites-available/josephbleroy.com</code></p>
<p>Implement the following code in your file and replace my domain name with your domain name. You can quickly do that in vim by using <code>:%s/jospehbleroy.com/yourdomainname.com/g</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nginx" data-lang="nginx"><span style="color:#66d9ef">server</span> {
     <span style="color:#f92672">listen</span> <span style="color:#ae81ff">80</span>;
     <span style="color:#f92672">listen</span> <span style="color:#ae81ff">443</span> <span style="color:#e6db74">ssl</span> <span style="color:#e6db74">http2</span>;
     <span style="color:#f92672">server_name</span> <span style="color:#e6db74">josephbleroy.com</span> <span style="color:#e6db74">www.josephbleroy.com</span>;
     <span style="color:#f92672">ssl_protocols</span> <span style="color:#e6db74">TLSv1.2</span>;
     <span style="color:#f92672">ssl_ciphers</span> <span style="color:#e6db74">EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5</span>;
     <span style="color:#f92672">ssl_prefer_server_ciphers</span> <span style="color:#e6db74">On</span>;
     <span style="color:#f92672">ssl_certificate</span> <span style="color:#e6db74">/etc/letsencrypt/live/josephbleroy.com/fullchain.pem</span>;
     <span style="color:#f92672">ssl_certificate_key</span> <span style="color:#e6db74">/etc/letsencrypt/live/josephbleroy.com/privkey.pem</span>;
     <span style="color:#f92672">ssl_trusted_certificate</span> <span style="color:#e6db74">/etc/letsencrypt/live/josephbleroy.com/chain.pem</span>;
     <span style="color:#f92672">ssl_session_cache</span> <span style="color:#e6db74">shared:SSL:128m</span>;
     <span style="color:#f92672">add_header</span> <span style="color:#e6db74">Strict-Transport-Security</span> <span style="color:#e6db74">&#34;max-age=31557600</span>; <span style="color:#f92672">includeSubDomains&#34;</span>;
     <span style="color:#f92672">add_header</span> <span style="color:#e6db74">X-Frame-Options</span> <span style="color:#e6db74">&#34;SAMEORIGIN&#34;</span> <span style="color:#e6db74">always</span>;
     <span style="color:#f92672">add_header</span> <span style="color:#e6db74">X-Content-Type-Options</span> <span style="color:#e6db74">&#34;nosniff&#34;</span> <span style="color:#e6db74">always</span>;
     <span style="color:#f92672">add_header</span> <span style="color:#e6db74">X-Xss-Protection</span> <span style="color:#e6db74">&#34;1</span>; <span style="color:#f92672">mode=block&#34;</span> <span style="color:#e6db74">always</span>;
     <span style="color:#f92672">add_header</span> <span style="color:#e6db74">Content-Security-Policy</span> <span style="color:#e6db74">&#34;script-src</span> <span style="color:#e6db74">&#39;self&#39;</span> <span style="color:#e6db74">&#39;unsafe-inline&#39;</span> <span style="color:#e6db74">&#39;unsafe-eval&#39;</span> <span style="color:#e6db74">*.youtube.com</span> <span style="color:#e6db74">maps.gstatic.com</span> <span style="color:#e6db74">*.googleapis.com</span> <span style="color:#e6db74">*.google-analytics.com</span> <span style="color:#e6db74">assets.zendesk.com</span> <span style="color:#e6db74">connect.facebook.net</span>; <span style="color:#f92672">frame-src</span> <span style="color:#e6db74">&#39;self&#39;</span> <span style="color:#e6db74">*.youtube.com</span> <span style="color:#e6db74">assets.zendesk.com</span> <span style="color:#e6db74">*.facebook.com</span> <span style="color:#e6db74">s-static.ak.facebook.com</span> <span style="color:#e6db74">tautt.zendesk.com</span>; <span style="color:#f92672">object-src</span> <span style="color:#e6db74">&#39;self&#39;&#34;</span>;
     <span style="color:#f92672">ssl_stapling</span> <span style="color:#66d9ef">on</span>;
     <span style="color:#f92672">ssl_stapling_verify</span> <span style="color:#66d9ef">on</span>;
     <span style="color:#75715e"># Your favorite resolver may be used instead of the Google one below
</span><span style="color:#75715e"></span>     <span style="color:#f92672">resolver</span> <span style="color:#ae81ff">8</span><span style="color:#e6db74">.8.8.8</span>;
     <span style="color:#f92672">root</span> <span style="color:#e6db74">/var/www/josephbleroy.com/html</span>;
     <span style="color:#f92672">index</span> <span style="color:#e6db74">index.html</span>;

     <span style="color:#f92672">location</span> <span style="color:#e6db74">&#39;/.well-known/acme-challenge&#39;</span> {
        <span style="color:#f92672">root</span>        <span style="color:#e6db74">/var/www/josephbleroy.com/html</span>;
      }

     <span style="color:#f92672">location</span> <span style="color:#e6db74">/</span> {
              <span style="color:#f92672">if</span> <span style="color:#e6db74">(</span>$scheme = <span style="color:#e6db74">http)</span> {
                <span style="color:#f92672">return</span> <span style="color:#ae81ff">301</span> <span style="color:#e6db74">https://</span>$server_name$request_uri;
              }
     }
}
</code></pre></div><p>You can add additional directives and values to <strong>Content-Security-Policy</strong> to match the resource providers you use on your website. For example, if you have a JavaScript file on Cloud Flare&rsquo;s CDN JavaScript server(s), you&rsquo;ll need to add a value for <code>cdnjs.cloudflare.com</code> so that it looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nginx" data-lang="nginx"><span style="color:#66d9ef">add_header</span> <span style="color:#e6db74">Content-Security-Policy</span> <span style="color:#e6db74">&#34;script-src</span> <span style="color:#e6db74">&#39;self&#39;</span> <span style="color:#e6db74">&#39;unsafe-inline&#39;</span> <span style="color:#e6db74">&#39;unsafe-eval&#39;</span> <span style="color:#e6db74">cdnjs.cloudflare.com</span>;
</code></pre></div><p>Now we need to make sure our Nginx configuration file is properly formatted. We&rsquo;ll also need to reload our server to ensure the changes we made go into effect. We can do run a check using <code>sudo nginx -t &amp;&amp; sudo nginx -s reload</code>. If there&rsquo;s any issue with our configuration, Nginx won&rsquo;t be reloaded and we&rsquo;ll have an output on where our syntax is incorrect.</p>
<p>We also want to make sure our certificates never expire, so we&rsquo;ll setup a small script and cron job to check the validity of our certificate and renew if possible:</p>
<p>First, we need to create the script. We can do that by <code>sudo vim renewCerts.sh</code> and then we&rsquo;ll need to insert the following script into the file:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#!/bin/sh
</span><span style="color:#75715e"></span><span style="color:#75715e"># This script renews all the Let&#39;s Encrypt certificates with a validity &lt; 30 days</span>

<span style="color:#66d9ef">if</span> ! letsencrypt renew &gt; /var/log/letsencrypt/renew.log 2&gt;&amp;<span style="color:#ae81ff">1</span> ; <span style="color:#66d9ef">then</span>
    echo Automated renewal failed:
    cat /var/log/letsencrypt/renew.log
    exit <span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">fi</span>
/usr/sbin/nginx -t <span style="color:#f92672">&amp;&amp;</span> /usr/sbin/nginx -s reload
</code></pre></div><p>Make sure you <code>:wq</code> to save the file and then we&rsquo;ll need to setup the cron job using <code>sudo crontab -e</code>, then we&rsquo;ll set the time we want to run the script <code>@daily /etc/letsencrypt/renewCerts.sh</code>, and finally we&rsquo;ll make it executable <code>chmod +x /etc/letsencrypt/renewCerts.sh</code>.</p>
<p>We&rsquo;re now finished our first site&rsquo;s certificate. Our script will run daily and check if the certificate is going to expire in less than 30 days. If it&rsquo;s less than 30 days until expiry, it&rsquo;ll be renewed for another 90 days.</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2017/image2.png" alt=""></p>
<p>If there&rsquo;s any type of error, it&rsquo;s probably related to the script not being able to be executed. You&rsquo;ll have to play around with the permissions. You can run the commands in the script individually using the <code>--dry-run</code>, which will simulate the command without actually executing it.</p>
<h3 id="adding-additional-certificates-and-sites">Adding Additional Certificates and Sites</h3>
<p>I currently host several personal websites on one VPS (Virtual Private Server) using Google Cloud Platform. I have one instance of Nginx running and I have several virtual host configurations for each site. I won&rsquo;t go into too much detail because that&rsquo;s a topic within itself, but if you want to serve multiple sites on one IP address (server) you can simply follow the above steps once each host configuration is created and linked.</p>
<p>You can create a new virtual host file by doing the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo mkdir /var/www/yourfirstsite.you/html
sudo mkdir /var/www/yoursecondsite.you/html
sudo vim /etc/nginx/sites-available/yourfirstsite.you
sudo vim /etc/nginx/sites-available/yoursecondsite.you
sudo ln -s /etc/nginx/sites-available/yourfirstsite.you /etc/nginx/sites-enabled/
sudo ln -s /etc/nginx/sites-available/yoursecondsite.you /etc/nginx/sites-enabled
</code></pre></div><p>You&rsquo;ll now be able to serve multiple sites after you replace all the domain and directory values, as well as the value for each certificate, in <code>/etc/nginx/sites-available/yourfirstsite.you</code> and <code>/etc/nginx/sites-available/yoursecondsite.you</code>. After that, make sure you check the syntax and reload Nginx using <code>sudo nginx -t &amp;&amp; sudo nginx -s reload</code>.</p>
<h3 id="future-work">Future Work</h3>
<p>There&rsquo;s a few things I want to implement in the near future. I&rsquo;d like to build Nginx from source so that I can implement an new AEAD (Authenticated Encryption with Associated Data) cipher suite called <strong>ChaCha20-Poly1305</strong>. It&rsquo;ll be the standard and only option once <a href="https://tools.ietf.org/html/rfc7539">(TLSv1.3)</a> is released. Most mobile devices do not support AES Hardware Acceleration, so this cipher suite will improve performance by roughly ~200%, which is pretty great.</p>
<p>To do this we&rsquo;ll have to build Nginx with a custom version of OpenSSL. As always, make sure you backup your site before performing any of the following commands:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cd ~
mkdir nginx
cd nginx
wget http://nginx.org/download/nginx-1.11.8.tar.gz
tar -xzvf nginx-1.11.8.tar.gz
rm nginx-1.11.8.tar.gz
</code></pre></div><p>This will download the mainline (development) version of Nginx. We&rsquo;ll also need to do the same with OpenSSL, so make sure you remain in the same directory:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">wget https://www.openssl.org/source/openssl-1.1.0c.tar.gz
tar -xzvf openssl-1.1.0c.tar.gz
rm openssl-1.1.0c.tar.gz
</code></pre></div><p>Now we&rsquo;re going to configure Nginx 1.11.8 to work with OpenSSL 1.1.0c, which supports ChaCha20-Poly1305:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cd nginx-1.11.8
./configure <span style="color:#f92672">(</span>existing configure arguments<span style="color:#f92672">)</span> --with-openssl<span style="color:#f92672">=</span>/home/joe/nginx/openssl-1.1.0c
</code></pre></div><p>Now we need to build Nginx so that it includes OpenSSL 1.1.0c (you might need to run them using sudo):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">make
sudo make install
sudo service nginx restart
</code></pre></div><p>You can read more about this cipher suite on Scott Helme&rsquo;s (a very talented security researcher from the United Kingdom) <a href="https://scotthelme.co.uk/doing-the-chacha-with-nginx/">website</a>.</p>
<h3 id="conclusion">Conclusion</h3>
<p>I hope this guide was somewhat helpful to help you get started with using Let&rsquo;s Encrypt. I intend to update this post with better terminology and more clear explanations. I&rsquo;ll probably add some more details about some of the individual settings as well, and update them if there are any vulnerabilities with the ciphers and encryptions methods used.</p>
<p>If there are any errors, please send me <a href="https://www.josephbleroy.com/page/contact">contact me</a> to let me know.</p>
]]></content></item><item><title>The Current State of DevOps and the Agile Movement in Japan</title><link>https://josephbleroy.com/posts/2016/09/the-current-state-of-devops-and-the-agile-movement-in-japan/</link><pubDate>Thu, 15 Sep 2016 00:00:00 +0000</pubDate><guid>https://josephbleroy.com/posts/2016/09/the-current-state-of-devops-and-the-agile-movement-in-japan/</guid><description>Last Friday I was fortunate enough to attend a seminar at Creationline, Inc. in the Akihabara district of Tokyo. The topic, as you may have already figured out, was on the current state of DevOps and the Agile Movement in Japan. I&amp;rsquo;ve been interested in learning more about how software development and projects are managed in Japan. Some of the speakers included Ippei Suzuki from Creationline, Inc., Hiroaki &amp;ldquo;bucci&amp;rdquo; Kawabuchi from CI&amp;amp;T and Tsuyoshi Ushio from Microsoft.</description><content type="html"><![CDATA[<p>Last Friday I was fortunate enough to attend a seminar at <a href="http://www.creationline.com/en/">Creationline, Inc.</a> in the Akihabara district of Tokyo. The topic, as you may have already figured out, was on the current state of DevOps and the Agile Movement in Japan. I&rsquo;ve been interested in learning more about how software development and projects are managed in Japan. Some of the speakers included <a href="https://twitter.com/CloudNewsCenter">Ippei Suzuki</a> from Creationline, Inc., <a href="http://www.ciandt.com/home">Hiroaki &ldquo;bucci&rdquo; Kawabuchi</a> from CI&amp;T and <a href="https://twitter.com/sandayuu">Tsuyoshi Ushio</a> from Microsoft.</p>
<p>One of the several problems preventing Japan from being a global leader in software development and truly embracing startup culture is due to its traditional business attitude toward workplace innovation and management. Many companies in Japan have failed to adapt to modern software development practices, and as a result, they&rsquo;re being technologically defeated. However, there are many companies who&rsquo;ve accepted this process and have been able to keep up with society&rsquo;s ever-changing landscape.</p>
<blockquote>
<p>Samuel J. Palmisano, chairperson of IBM, preaches that &ldquo;only the person who changes the rule of the game wins.&rdquo; However, many Japanese companies have adopted the same rule of the game . . . [a]s result, the Japanese companies have fallen victim to the Galapagos syndrome, which means an isolated state.</p>
</blockquote>
<p><a href="http://www.springer.com/us/book/9784431550952"><em>Japanese Management in Change: The Impact of Globalization and Market Principles</em></a></p>
<h4 id="what-devops-is-and-what-it-isnt">What DevOps Is and What It Isn&rsquo;t</h4>
<p>DevOps is often mistaken for a product or something that can be purchased and installed. However, that is not the case and some companies are falling victim to this belief. It is, however, a way for companies to automate processes, connect their IT and Software Development teams, unify protocols, and prevent compliance issues. If one system can be set up to meet certain guidelines and security protocols, a thousand can be rapidly deployed and integrated into a company&rsquo;s network, saving time and other valuable resources.</p>
<p>By using configuration automation software, such as Chef or Puppet, a company&rsquo;s infrastructure can be managed by turning it into a single, self-contained configuration file, where it is then deployed across all client systems through a master configuration system through configuration files called &ldquo;recipes&rdquo; and &ldquo;manifests&rdquo;, respectively. There is a steep interdisciplinary learning curve to make DevOps work properly within an organization, as well as learning the tools which are required to employ this model. However, this goes without saying, the benefits are endless because it allows IT and Software Development teams to work in unison. The benefits DevOps introduces to organizations may include simplifying the maintenance of systems, improving security and freeing up resources to develop new features with fewer bugs in shorter time frames.</p>
<h4 id="agile-development-for-project-management">Agile Development for Project Management</h4>
<p>Most traditional companies follow the &ldquo;waterfall&rdquo; methodology when they start an IT or Software Development related project. However, there&rsquo;s a pitfall to this approach and it prevents teams from delivering products until they&rsquo;re completely finished. Essentially, there&rsquo;s nothing in between for the client to experience or provide to their customers.</p>
<p>During this part of the seminar, Hiroaki Kawabuchi from CI&amp;T presented a case study from one of their recent projects. Kawabuchi-san, or &ldquo;bucci&rdquo; as he likes to be called, explained how Agile concepts are utilized in the various phases of development.</p>
<p>Luckily I was able to jot down some key takeaways detailing how Agile development works, from a beginner&rsquo;s perspective. Think of it as the steps required to get a car running. You need the body, the engine, the wheels, and the operator. Until all requirements are satisfied, you&rsquo;re unable to drive. However, using an agile development process you start off with something that is fully operation during each phase of development. Your end goal might be a luxury car, however, that&rsquo;s an impractical expectation at the start of a project. So, at step one of the Agile development process you might have a skateboard, step two a bicycle and step three a car. During each phase your clients are able to work with something and your team is able to constantly implement features, such as a bike with a light (more efficient backend feature) or a car with tinted windows (new frontend feature).</p>
<p>It&rsquo;s important to note that the Agile movement isn&rsquo;t a methodology, but rather, a set of values and principles used to develop different project management frameworks. What I&rsquo;ve described above can be implemented into what&rsquo;s called the Scrum methodology, which essentially is an &ldquo;iterative and incremental agile software development framework for managing product development&rdquo;. Scrum development has been widely embraced by teams across the entire IT and software development landscape. Project leaders in the <a href="https://www.mitre.org/sites/default/files/publications/MITRE-Defense-Agile-Acquisition-Guide.pdf">Department of Defense</a> have even decided to modernize their IT infrastructure by using methods using Scrum methodologies.</p>
<h4 id="implementing-devops-into-a-waterfall-society">Implementing DevOps Into a Waterfall Society</h4>
<p>The last talk was provided Tsuyoshi Ushio. Tsuyoshi is a Senior Technical Evangelist at Microsoft. Before I explain the talk, I want to provide a description of what a Technical Evangelist does, and why they&rsquo;re incredibly important. There&rsquo;s a concept in the field of social dynamics called critical mass which is when something is widely adopted and utilized by everyone, such as the way Google and Uber are used today. What Tsuyoshi does is build support, generate momentum for a certain product or concept, and implement it into a team&rsquo;s development process. It then becomes their solution for solving complex problems and building software, scaling infrastructure, etc.</p>
<p>The deeper meaning of Tsuyoshi&rsquo;s presentation was to describe the problems with Japan and why companies are having a difficult time implementing DevOps and Agile development concepts into their culture. What Japan is having a problem with is accepting more 外国人 (gaikokujin) or people from foreign countries into their companies and giving them a voice to express different ways to approach and solve problems. Utilizing this approach allows companies to appeal to the foreign market, evolve, and continue to grow.</p>
<p>However, many traditional Japanese companies fail to let this happen. There&rsquo;s an inherited risk of identity loss when foreigners are included in a company that employs primarily Japanese individuals. However, that fear also prevents Japan from being innovative and technologically relevant.</p>
<p>I greatly welcome any criticism or feedback in response to this article. If there are any inaccuracies, please let me know by sending me an <a href="https://www.josephbleroy.com/contact/">email</a> or by leaving a comment. A significant portion of this was written from my personal point of view, however, I&rsquo;ve tried to eliminate any personal bias I might have toward Japan and its culture. I&rsquo;ve attended over a dozen events and conferences over the past several years, which by no means qualifies me as an expert, but rather someone who wants to see Japan succeed and work with more foreign countries and individuals.</p>
<h4 id="references">References</h4>
<ul>
<li><a href="http://www.springer.com/us/book/9784431550952">Japanese Management in Change: The Impact of Globalization and Market Principles</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-configuration-management">An Introduction to Configuration Management</a></li>
<li><a href="http://microsoftdevops.github.io/devops/2016/05/24/karadamedica.html">Learnings from a DevOps Hackfest with Karadamedica</a></li>
</ul>
]]></content></item><item><title>Packet Capture Analysis of Ransomware</title><link>https://josephbleroy.com/posts/2016/05/packet-capture-analysis-of-ransomware/</link><pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate><guid>https://josephbleroy.com/posts/2016/05/packet-capture-analysis-of-ransomware/</guid><description>In the 2016 Data Breach Investigation Report, Verizon discovered that &amp;ldquo;ransomware is on the rise&amp;rdquo;. Malware crafted to encrypt the victim&amp;rsquo;s drive content, in lieu of a hefty Bitcoin payment to unlock the protected files, encompasses 39% of crimeware incidents in 2015. Hackers primarily targeted the public sector, manufacturing, and information industries. What makes ransomware so easy to deploy is the minimal skill set required to craft an executable file masked as something else, such as a gif or flash object.</description><content type="html"><![CDATA[<p>In the 2016 Data Breach Investigation Report, Verizon discovered that &ldquo;<strong>ransomware</strong> is on the rise&rdquo;. Malware crafted to encrypt the victim&rsquo;s drive content, in lieu of a hefty Bitcoin payment to unlock the protected files, <strong>encompasses 39% of crimeware incidents in 2015</strong>. Hackers primarily targeted the <strong>public sector, manufacturing, and information industries</strong>. What makes ransomware so easy to deploy is the minimal skill set required to craft an executable file masked as something else, such as a gif or flash object.</p>
<p>Verizon recommends taking the following steps to prevent ransomware from infecting your technology assets:</p>
<p><strong>1) Patch promptly:</strong> Cybercriminals are
successfully exploiting known vulnerabilities; timely patching could block many attacks.</p>
<p><strong>2) Implement configuration change monitoring:</strong>
Many attack methods can be easily detected by watching key indicators.</p>
<p><strong>3) Back up your systems regularly:</strong> This will keep
your business running should any systems fall foul of ransomware.</p>
<p><strong>4) Capture data on attacks:</strong> Examine the different
types of malware you’ve fallen foul of—and, if possible, the entry point. This gives you
intelligence on where to prioritize your efforts.</p>
<p>A very detailed and understandable explanation on how ransomware is delivered and remains hidden can be found at <strong><a href="https://heimdalsecurity.com/blog/10-reasons-why-your-traditional-antivirus-cant-detect-second-generation-malware/">Heimdal Security&rsquo;s blog</a></strong>.</p>
<p>With that being said, I decided to go through a packet capture exercise. The entire process can be found below. Hopefully those interested can learn from my experience and I can continue to evolve my packet capture analysis process.</p>
<p><strong>Madison Square Garden Security Operations Center</strong><!-- raw HTML omitted -->
A recent packet capture analysis revealed that some type of malicious activity took place on Madison Square Garden’s network. Snort and Suricata logs displayed some events which required further investigation.</p>
<p>It’s important to become familiar with the Snort and Suricata event terminology:</p>
<pre><code>ET: emerging threat; something that is a deviant from normal activity and raises a flag in an IDS/IPS, such as Snort.

Neutrino Landing: the user will visit a malicious webpage where an embedded Flash object will run code, usually JavaScript, to scan the user’s system for vulnerabilities to exploit.

Nemucod: a JavaScript trojan virus that allows remote files to be downloaded without the user’s consent.

Cryptowall: a type of malicious code that encrypts the contents of a user’s hard drive, thus making the files inaccessible. The only way to access the files against is by receiving the private key from the attacker, usually by paying a significant amount of money in the form of Bitcoin. This is usually labeled as “Ransomware”.

AlphaCrypt: a type of ransomware that encrypts the contents of your hard drive then directs you to a page to pay Bitcoin to decrypt your files.
</code></pre>
<p>There are three hosts which reside on the internal network with the following attributes:</p>
<pre><code>Host 1: 192.168.122.52
Host Name: Jennifer-PC
MAC Address: 00:26:55:32:A9:17 (Hewlett Packard)

Host 2: 192.168.122.130
Host Name: FULL-METAL-JACK
MAC Address: 00:22:19:E2:4B:86 (Dell Inc.)

Host 3: 192.168.122.132
Host Name: Hokaydoo-PC
MAC Address: 48:5B:39:C1:F2:48 (ASUSTek Computer Inc.)
</code></pre>
<p><strong>Host: Jennifer-PC</strong><!-- raw HTML omitted -->
Let’s take a look at some of the suspicious host activity. We’ll start with <strong>Jennifer-PC</strong>, <strong>192.168.122.52</strong>. Using Xplico, a PCAP analysis tool, I was able to get a high level overview of the number of DNS queries Jennifer-PC made. Most of the connections made were to valid websites, such as Google, Yahoo, and various CDN providers. However, a few hosts required further investigation as they were unknown to me.</p>
<pre><code>outdoorsamoa[.]com: 54.66.231.10
st[.]domandvilma[.]com: 192.185.21.183
</code></pre>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image02.png" alt="">
<img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image29.png" alt="">
<img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image19.png" alt="">
<img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image08.png" alt=""></p>
<p>The first connection Jennifer-PC made was to 54.66.231.10. I used a filter to check the packets sent between the two hosts: <code>ip.src==192.168.122.52 and ip.dst==54.66.231.10</code></p>
<p>Nothing seemed abnormal and I ran a scan against the domain, <strong>outdoorsamoa[.]com</strong>, using VirusTotal. As expected, the domain came back clean. The second connection was to <strong>st[.]domandvilma.com</strong>: <code>ip.src==192.168.122.52 and ip.dst==192.185.21.183</code>. There were a lot less connections between the two hosts. While none of the TCP stream seemed alarming, running the domain <strong>st[.]domandvilma[.]com/fvviewforumqn.php</strong> in VirusTotal detected the domain as a malicious malware site.</p>
<p>The frame is 9983, so I wanted to export the packet as a HTTP object to investigate the website’s code. For this I used NetworkMiner to investigate the <strong>fviewforumqn.php</strong> file. To my surprise, the extension was actually a <strong>.javascript</strong> file, not a <strong>.php</strong> file.</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image09.png" alt=""></p>
<p>While the activity is suspicious, investigating the actual contents of the file revealed the file to be non-malicious.</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image25.png" alt=""></p>
<p>No further connections were made and my conclusion was that the payload was non-malicious, just odd.</p>
<p><strong>Host: Hokaydoo-PC</strong><!-- raw HTML omitted -->
The next host, <strong>Hokaydoo-PC</strong> at <strong>192.168.122.132</strong>, displayed some malicious behavior. The Suricata event logs showed the following:</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image28.png" alt=""></p>
<p>From this Suricata event log we can see that the activity originated from <strong>92.51.131.150</strong> (<strong>koeppl[.]com</strong>) and was routed by <strong>Hokaydoo-PC</strong> at <strong>192.168.122.132</strong>. This type of activity is suspicious and requires further packet analysis in Wireshark: <code>ip.src==92.51.131.150 and ip.dst==192.168.122.132</code>. Following the TCP stream I determined the initial compromise took place when <strong>Hokaydoo-PC</strong> visited <strong>google.com.au</strong> and searched for <strong>koeppl[.]com</strong>. Nothing seemed too strange until I opened the files between the two hosts in NetworkMiner.</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image07.png" alt=""></p>
<p>I decided to view the contents of <strong>index.html</strong>, and to my surprise I found a very strange embedded JavaScript code in the contents of the HTML document.</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image21.png" alt=""></p>
<p>I knew this was not normal, so I decided to take a look on VirusTotal for the domain <strong>koeppl[.]com</strong>. The domain is part of a malware domain blacklist and is known as a malicious website. I decided that I wanted to know what the JavaScript actually contained to understand how it was working. To do this I used <strong><a href="https://github.com/svent/jsdetox">JSDetox</a></strong>, an open source JavaScript malware analysis tool.</p>
<p>There were 4 malicious JavaScripts on the HTML page, however, I was not able to properly interpret the actual contents. I suspect I need some more practice with malware reverse engineering. The best tool I found to handle the task was <strong><a href="https://github.com/HynekPetrak/malware-jail">Malware Jail</a></strong>, but once again my ability to reverse engineer the JavaScript malware was unsuccessful.</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image14.png" alt=""></p>
<p>It’s to my understanding that <strong>koeppl[.]com</strong> infected the requesting host, <strong>Hokaydoo-PC</strong>, because the next request on the Suricata event log states <strong>Neutrino EK Payload from 89.38.144.75</strong>. This is suspicious because the IP address resolves to <strong>uacltr[.]securetoppc[.]top</strong> and <strong>gbesbsdsb[.]securetopc[.]top</strong>.</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image13.png" alt="">
<img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image04.png" alt=""></p>
<p>The domains are not only suspicious but the payloads redirect the host to some very suspicious files, as seen above. Let’s take a look at the actual files in NetworkMiner. The following files are suspicious and required further analysis on VirusTotal:</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/table.png" alt=""></p>
<p>The preceding HTML documents are all vulnerable as they all point back to <strong>cheerful-stumble-broad.html.swf</strong>, which is a known malware. When I opened <strong>fellow-touch-death</strong>, it actually deleted its contents and renamed itself to <strong>fellow-touch-death-c.html</strong>. The last URI was not a HTML file because upon opening it, the file contained unreadable data, possibly encrypted.</p>
<p>From what I’ve concluded, the initial infection came from visiting <strong>koeppl[.]com</strong>, at frame 12754, and at frame 12888 the infected SWF file was executed on the host’s computer:</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image11.png" alt="">
<img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image10.png" alt=""></p>
<p>Let’s recap on what’s happened so far:</p>
<pre><code>1) Hokaydoo-PC visited koeppl.com
2) The embedded JavScript requests *.securetopc[.]top
3) SWF is downloaded
4) Hokaydoo-PC is infected
5) Hokaydoo is redirected to 188.138.101.154 (bizsouls[.]com)
</code></pre>
<p>I’m not sure what <strong>bizsouls[.]com</strong> is but VirusTotal says that it is clean. However, the following looks a bit suspicious.</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image01.png" alt=""></p>
<p>There’s two PHP files with a few alphanumeric strings inside the contents of the files. Suricata logs say that it’s a Cryptowall check in.</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image06.png" alt=""></p>
<p>I’ll assume that the values inside the two PHP files are passed to some JavaScript file which allows the redirection process to occur.</p>
<p><strong>Host: Full-Metal-Jack</strong><!-- raw HTML omitted -->
The final host, <strong>Full-Metal-Jack</strong> at <strong>192.168.122.130</strong>, displayed some malicious behavior right off the bat. The Suricata event logs showed the following:</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image23.png" alt=""></p>
<p>Taking a look at the HTTP requests made by Full-Metal-Jack, shown below, I’ve determined that the initial compromise took place from an email link or attachment. This is due to the fact that the second item is mail.yahoo.com and is immediately followed by a malware domain, <strong>ma-wt[.]com[.]sa</strong>. I ran a quick check on VirusTotal to determine this information.</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image20.png" alt=""></p>
<p>However, I wanted to know more. I followed the TCP stream starting at <strong>ma-wt[.]com[.]sa</strong>. It looks like <strong>66b32.gif</strong> was downloaded, which was probably the malware that infected the host.</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image05.png" alt=""></p>
<p>To further validate this, I took at look at the anomalies section on NetworkMiner, and sure enough, there were multiple gif files that were unable to be correctly decoded.</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image22.png" alt=""></p>
<p>It’s likely the malware was masked as a gif file, since running <strong>66b32.gif</strong> in VirusTotal displayed multiple detection warnings.</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image16.png" alt=""></p>
<p>There are actually many naming convention variants for the gif file, such as <strong>174125.gif</strong>, but the SHA-256 value remains the same.</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image15.png" alt="">
<img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image12.png" alt=""></p>
<p>There was another gif file named <strong>250acae.gif</strong> that I also scanned and it also turned up as a positive malware on VirusTotal. After the initial website infected the host, several other websites sent malicious software to <strong>Full-Metal-Jack</strong>.</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image03.png" alt=""></p>
<p>There were two additional IP addresses in the HTTP request stream for <strong>Full-Metal-Jack</strong>.</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/table2.PNG" alt=""></p>
<p>The first host in the table above delivered the following “gif” payloads:</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image24.png" alt=""></p>
<p>Running both of the files through VirusTotal displayed various positive matches for malicious software. The second host, <strong>freshanointingministries-sc[.]org</strong>, delivered the following “gif” payloads as well:</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image17.png" alt=""></p>
<p>Once again, both files were malicious when uploading them to VirusTotal. Last but not least, let’s take a look at <strong>Hokaydoo-PC</strong> again.</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image27.png" alt=""></p>
<p>We see that the host connected to <strong>8.8.4.4</strong>, which is a DNS server provided by Google. This isn’t abnormal, just Tor establishing a connection via a proxy. The real damage can be seen at frame 20250.</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image00.png" alt=""></p>
<p>The SWF file that <strong>Hokaydoo-PC</strong> downloaded from koeppl.com encrypted his files and sent him to a ransomware page, <strong>[3wzn5p2yium7akj].waytopaytosystem[.]com</strong>:</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image18.png" alt=""></p>
<p>The ransomware page is shown below, <strong>1f96s0p[1].html</strong>, and <strong>1f96s0p.html</strong> takes the user to a basic ransomware page, which probably redirects to <strong>1f96s0p[1].html</strong>.</p>
<p><img src="https://storage.googleapis.com/josephbleroy-images/images/2016/05/image26.png" alt=""></p>
<p>This is the full analysis of the PCAP file for the Madison Square Garden ransomware infection. It’s likely that the two hosts that became infected were either unlucky, such as <strong>Hokaydoo-PC</strong>, and <strong>Full-Metal-Jack</strong> was targeted in a phishing campaign to his Yahoo email account.</p>
<p>Since the users were all infected by visiting websites, I would recommend that they be wary of the links they click on or download from their email accounts. It’s also important to disable JavaScript, if possible, or block JavaScript that went through obscurification methods, such as the one found on koeppl.com.</p>
<p>I would also recommend that all software be kept up to date to prevent any vulnerability exploits, important data be kept on a share drive to prevent precious documents from being encrypted by hackers, and for training by security conscious employees be conducted to prevent this sort of event from happening.</p>
<p>At the very least, I think having all browsers incorporate some type of blacklisting of malicious websites, or keep a proxy with a blacklist of host and IP addresses from accessing the malicious websites that delivered the SWF and fake gif files.</p>
<p>Overall, the main victims were <strong>Hokaydoo-PC</strong> and <strong>Full-Metal-Jack</strong>. However, <strong>Jennifer-PC</strong> did visit a malicious website, <strong>st[.]domandvilma[.]com</strong> where a JavaScript file was downloaded, the execution never actually did anything, that I was able to see.</p>
]]></content></item></channel></rss>